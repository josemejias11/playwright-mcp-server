name: CI - WebDriverIO MCP Server

on:
  push:
    branches: [newsela]
  pull_request:
    branches: [newsela]
  workflow_dispatch: # Allow manual triggers

permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '20'
  CHROME_VERSION: 'stable'

jobs:
  lint-and-build:
    name: Lint & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint
        run: npm run lint

      - name: Lint TypeScript
        run: npx tsc --noEmit

      - name: Build MCP server
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  wdio-browser-matrix:
    name: WebDriverIO (${{ matrix.browser }})
    needs: lint-and-build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build (reuse artifacts optional)
        run: npm run build

      - name: Setup Chrome
        if: matrix.browser == 'chrome'
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: ${{ env.CHROME_VERSION }}

      - name: Run tests (${{ matrix.browser }})
        env:
          BROWSERS: ${{ matrix.browser }}
        run: npm test

      - name: Generate Allure HTML
        run: |
          npx allure generate reports/allure-results --clean -o reports/allure-report || echo "Allure generation skipped"

      - name: Upload reports (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.browser }}
          path: reports/
          retention-days: 30

  wdio-safari:
    name: WebDriverIO (safari)
    needs: lint-and-build
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Enable safaridriver
        run: sudo safaridriver --enable

      - name: Run tests (safari)
        env:
          BROWSERS: safari
        run: npm test

      - name: Generate Allure HTML
        run: |
          npx allure generate reports/allure-results --clean -o reports/allure-report || echo "Allure generation skipped"

      - name: Upload reports (safari)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-safari
          path: reports/
          retention-days: 30

  mcp-server-validation:
    name: MCP Server Validation
    needs: lint-and-build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Setup Chrome for WebDriverIO
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: ${{ env.CHROME_VERSION }}

      - name: Validate MCP server starts correctly
        run: |
          echo "🔍 Testing MCP server startup..."
          timeout 10s npm run mcp:server || [ $? -eq 124 ] && echo "✅ MCP server started successfully"

      - name: Test WebDriver manager functionality
        run: |
          echo "🧪 Testing WebDriver functionality..."
          node -e "
          import('./dist/webdriver/manager.js').then(async ({ WebDriverManager }) => {
            const manager = new WebDriverManager();
            try {
              console.log('Testing WebDriver manager...');
              const driver = await manager.getDriver();
              await driver.url('https://example.com');
              const title = await driver.getTitle();
              console.log('✅ WebDriver test successful, title:', title);
              await manager.closeDriver();
            } catch (error) {
              console.error('❌ WebDriver test failed:', error);
              process.exit(1);
            }
          });
          "

      - name: Validate screenshot functionality
        run: |
          echo "📸 Testing screenshot functionality..."
          node -e "
          import('./dist/webdriver/manager.js').then(async ({ WebDriverManager }) => {
            const manager = new WebDriverManager();
            try {
              console.log('Testing screenshot capture...');
              const driver = await manager.getDriver();
              await driver.url('https://example.com');
              const screenshotPath = await manager.takeScreenshot('ci-test.png');
              console.log('✅ Screenshot saved to:', screenshotPath);
              await manager.closeDriver();
            } catch (error) {
              console.error('❌ Screenshot test failed:', error);
              process.exit(1);
            }
          });
          "

  security-scan:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Install audit-ci
        run: npm install -g audit-ci
        continue-on-error: true

      - name: Run dependency check
        run: npx audit-ci --moderate
        continue-on-error: true

  generate-reports:
    name: Aggregate Test Reports
    needs: [wdio-browser-matrix, wdio-safari, mcp-server-validation]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Chrome reports
        uses: actions/download-artifact@v4
        with:
          name: test-reports-chrome
          path: reports/chrome

      - name: Download Firefox reports
        uses: actions/download-artifact@v4
        with:
          name: test-reports-firefox
          path: reports/firefox

      - name: Download Safari reports
        uses: actions/download-artifact@v4
        with:
          name: test-reports-safari
          path: reports/safari

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Create index page for reports
        run: |
          mkdir -p reports/
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>WebDriverIO MCP Server - Test Reports</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .report-section { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }
                  .success { background-color: #d4edda; border-color: #c3e6cb; }
                  .info { background-color: #d1ecf1; border-color: #bee5eb; }
                  ul { list-style-type: none; padding: 0; }
                  li { padding: 8px; margin: 4px 0; background: #f8f9fa; border-radius: 4px; }
                  a { text-decoration: none; color: #007bff; }
                  a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>🚀 WebDriverIO MCP Server - Test Reports</h1>
              <p><strong>Branch:</strong> newsela | <strong>Build:</strong> ${{ github.run_number }}</p>
              <p><strong>Browsers:</strong> Chrome, Firefox, Safari</p>
              
              <div class="report-section success">
                  <h2>📊 Available Reports</h2>
                  <ul>
                      <li>📄 <a href="chrome/json/">Chrome JSON Results</a></li>
                      <li>📄 <a href="firefox/json/">Firefox JSON Results</a></li>
                      <li>📄 <a href="safari/json/">Safari JSON Results</a></li>
                      <li>📋 <a href="chrome/junit/">JUnit (Chrome)</a> | <a href="firefox/junit/">(Firefox)</a> | <a href="safari/junit/">(Safari)</a></li>
                      <li>📸 <a href="chrome/screenshots/">Screenshots (Chrome)</a> | <a href="firefox/screenshots/">(Firefox)</a> | <a href="safari/screenshots/">(Safari)</a></li>
                      <li>📝 <a href="chrome/wdio/">Logs (Chrome)</a> | <a href="firefox/wdio/">(Firefox)</a> | <a href="safari/wdio/">(Safari)</a></li>
                  </ul>
              </div>

              <div class="report-section info">
                  <h2>🔧 WebDriverIO MCP Server</h2>
                  <p>This is a Model Context Protocol (MCP) server that provides web automation capabilities using WebDriverIO and TypeScript.</p>
                  <ul>
                      <li><strong>15 automation tools</strong> available for web interactions</li>
                      <li><strong>Chrome browser</strong> automation with headless support</li>
                      <li><strong>Centralized reporting</strong> with multiple output formats</li>
                      <li><strong>TypeScript</strong> implementation with full type safety</li>
                  </ul>
              </div>
          </body>
          </html>
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/

  deploy-reports:
    name: Deploy Reports to Pages
    needs: generate-reports
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/newsela'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  test-summary:
    name: Test Summary
    needs: [lint-and-build, wdio-browser-matrix, wdio-safari, mcp-server-validation, security-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Create test summary
        run: |
          echo "# 🧪 WebDriverIO MCP Server - Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Build | ${{ needs.lint-and-build.result }} | TypeScript compile & bundle |" >> $GITHUB_STEP_SUMMARY
          echo "| WebDriverIO (Chrome/Firefox) | ${{ needs.wdio-browser-matrix.result }} | Matrix browser runs |" >> $GITHUB_STEP_SUMMARY
          echo "| WebDriverIO (Safari) | ${{ needs.wdio-safari.result }} | Safari remote automation |" >> $GITHUB_STEP_SUMMARY
          echo "| MCP Validation | ${{ needs.mcp-server-validation.result }} | MCP server startup and WebDriver functionality |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | Dependency vulnerability assessment |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Branch: newsela" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Multi-Browser Integration**: Chrome, Firefox, Safari covered" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **TypeScript Migration**: Full type safety and modern build process" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Centralized Reporting**: Aggregated per-browser artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **15 MCP Tools**: Comprehensive web automation capabilities" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Available Tools" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Navigation**: navigate, go_back, go_forward, refresh_page" >> $GITHUB_STEP_SUMMARY
          echo "- 🖱️ **Interaction**: click, hover, scroll_to" >> $GITHUB_STEP_SUMMARY
          echo "- ⌨️ **Input**: type, fill_form, select_option" >> $GITHUB_STEP_SUMMARY
          echo "- 📸 **Capture**: screenshot" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Information**: get_text, get_page_title, get_current_url" >> $GITHUB_STEP_SUMMARY
          echo "- ⏳ **Synchronization**: wait_for_element" >> $GITHUB_STEP_SUMMARY
